#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BombSweeper {
public:
	bool is_neighbour( vector <string> board, int i, int j )
	{
		if( i != 0 )
		{
			if( board[i-1][j] == 'B' ) return false;
			
			if( j != board[0].length() - 1 )	
				if( board[i-1][j+1] == 'B' ) return false;
			
			if( j != 0 )
				if( board[i-1][j-1] == 'B' ) return false;
		}
		if( i != board.size() - 1 )
		{
			if( board[i+1][j] == 'B' ) return false;	
			if( j != board[0].length() - 1 )	
				if( board[i+1][j+1] == 'B' ) return false;
			if( j != 0 )	
				if( board[i+1][j-1] == 'B' ) return false;
		}
		if( j != 0 )
			if( board[i][j-1] == 'B' )
				return false;
		if( j != board[0].length() - 1 )
			if( board[i][j+1] == 'B' )
				return false;
		
		return true;
	}
	
	double winPercentage(vector <string> board)
	{
		double wins = 0, losses = 0;
		
		for( int i = 0; i < board.size(); i++ )
		{
			for( int j = 0; j < board[i].length(); j++ )
			{
				if( board[i][j] == 'B' )
					losses++;
				else if( is_neighbour( board, i, j ) ) wins++;
			}
		}
		
		if( wins == 0 ) return 0;
		if( losses = 0 ) return 100;
		return 100 * wins / ( wins + losses );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BombSweeper *obj;
	double answer;
	obj = new BombSweeper();
	clock_t startTime = clock();
	answer = obj->winPercentage(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"...",".B.","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	all_right = KawigiEdit_RunTest(0, p0, false, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BBBBB","B...B","B...B","B...B","BBBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5.882352941176471;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".........",".B..B..B.",".........",".........",".B..B..B.",".........",".........",".B..B..B.","........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".........................",".........................",".........................","........................."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100.0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"......B.......B..B...........................B....","..............B..................BB..B............","B.B.B.............B.....B..............B..........","...................B...B....................BB....","...B.....B.........................B.......B.....B","B.B.........B.....B.......B..B......B.B...B.BB....","..B...................BB...............B..........",".........B...B................B..B................",".......BB.......B....B................B.....BBB...",".......BB..........B..............B......BB.......","...................BB.....................B.......","...B.B.B......B..............B...B......B.........","B................B................................","....B..........B.....B..BB....B...............BB..","..B....B.....B.............B.....B............B...","...................B.B........B..B.........B.B....",".....B.....B......................................","...........BB......BB...B.B........B...B..........",".....BBB......................................"
			"....",".B...........B....B...BB......B......B...B.B......","..................B........BB................B....","...............................B..B....BBB.B....B.","..........B.......................................",".....B..........B....BB......B.B......B......B....",".....B..................B........B................","............B.....B..B....BB...B....BB........B...","..B.................B.........B...................",".BB..............B................................","...B....B..................B.................B....","......B...B......B......................B.B.......","..............B..................B.......B........",".....B........BB...B.....B........................",".......B......B.B..B..........B...........B....B..","B...B...........B...B...B......B.B...B..B......B..","....B..B.....B.B.......BB..B............B.B....B..","B.......B..........B.........B...B.BB......B......","....B...............................B.............",".....B.B................................"
			"..........","..........B............B......B.B..B....B.........","....B...B.......................B.................","B.................B...........B..B....B...........","...B.....B........................................","...B..B......................................BBB..",".B...B....................................B....B..","...B...B..........B...B.B.........................",".....B.............B...BB..........B..BBB.BB......","....................B.....B.......................","........B..BB..........B.B....B...........B......B",".........B.....BB..B.............B....BB..........","....B..B..............B...B..B..........B........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 77.67558528428094;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
