#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BusSeating {
public:
  bool all_good(int i, int j, int k, string leftRow, string rightRow) {
    string ri = leftRow;
    string rj = leftRow;
    string rk = leftRow;

    if(i > 9)
    {
      i -= 10;
      ri = rightRow;
    }
    if(j > 9)
    {
      j -= 10;
      rj = rightRow;
    }
    if(k > 9)
    {
      k -= 10;
      rk = rightRow;
    }

    if((ri[i] != 'X') && (rj[j] != 'X') && (rk[k] != 'X')) return true;
    return false;
  }

  double get_dist(int i, int j) {
    bool sameRow;
    if((i <= 9 && j <= 9) || (i > 9 && j > 9)) {
      sameRow = true;
    } else {
      sameRow = false;
      if(i > 9) i-= 10;
      if(j > 9) j-= 10;
    }

    if(sameRow) {
      return abs(j - i);
    } else {
      return sqrt(4 + abs(j - i)*abs(j - i));
    }
  }

  double calc(int i, int j, int k) {
    double dist = 0.0;

    dist += get_dist(i, j);
    dist += get_dist(i, k);
    dist += get_dist(k, j);

    return dist;
  }

	double getArrangement(string leftRow, string rightRow) {
    double minDist = 999999.99;

    for(int i = 0; i < 20; i++) {
      for(int j = 0; j < 20; j++) {
        for(int k = 0; k < 20; k++) {
          if((i == k) || (i == j) || (k == j))
            continue;
          if(all_good(i, j, k, leftRow, rightRow)) {
            minDist = min(minDist, calc(i, j, k));
          }
        }
      }
    }

    return minDist;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	BusSeating *obj;
	double answer;
	obj = new BusSeating();
	clock_t startTime = clock();
	answer = obj->getArrangement(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = "----------";
	p1 = "----------";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XXX-X-XX-X";
	p1 = "-XXXX---XX";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXXXXXXXX";
	p1 = "-XX-XX-X--";
	p2 = 6.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXX-X-XX-X";
	p1 = "XXX-X-XX-X";
	p2 = 6.82842712474619;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
