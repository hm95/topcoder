#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

int xpos[8] = { -2, -2, 2, 2, -1, -1, 1, 1 };
int ypos[8] = { -1, 1, -1, 1, -2, 2, -2, 2 };

class CaptureThemAll {
public:
	struct path
	{
		int num_steps;
		string position;
	};

	bool is_ok( string pos )
	{
		if( 'a' <= pos[0] && 'h' >= pos[0] && '1' <= pos[1] && '8' >= pos[1] ) return true;
		return false;
	}

	int calc_min( string spos, string fpos )
	{
		path cur_pos;
		cur_pos.position = spos;
		cur_pos.num_steps = 0;

		queue <path> q;
		q.push( cur_pos );

		while( !q.empty() )
		{
			path tmp = q.front();
			q.pop();

			if( tmp.position == fpos ) return tmp.num_steps;

			for( int i = 0; i < 8; i++ )
			{
				path spot;
				spot.position = tmp.position;
				spot.position[0] += xpos[i];
				spot.position[1] += ypos[i];

				if( is_ok(spot.position) )
				{
					spot.num_steps = tmp.num_steps + 1;
					q.push( spot );
				}
			}
		}
	}

	int fastKnight(string knight, string rook, string queen)
	{
		int k2q = 0, k2r = 0, r2q = 0;
		k2q = calc_min( knight, queen );
		k2r = calc_min( knight, rook );
		r2q = calc_min( rook, queen );
	
		return min( k2q, k2r ) + r2q;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	CaptureThemAll *obj;
	int answer;
	obj = new CaptureThemAll();
	clock_t startTime = clock();
	answer = obj->fastKnight(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "a1";
	p1 = "b3";
	p2 = "c5";
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "b1";
	p1 = "c3";
	p2 = "a3";
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "a1";
	p1 = "a2";
	p2 = "b2";
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "a5";
	p1 = "b7";
	p2 = "e4";
	p3 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "h8";
	p1 = "e2";
	p2 = "d2";
	p3 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
