#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int INF = 1 << 29;
int dist[100010];

class CubeRoll {
public:
	bool sqr( int index )
	{
		if( index < 0 ) return false;
		long long d = (long long)sqrt( index + 0.5 );
		return ( index == d*d );
	}

	int find( long long index )
	{
		if( sqr(index) ) return 1;
		for( long long d = 1; d < 60000; d++ )
			if( sqr( index - d*d ) || sqr( d*d - index ) ) return 2;
		return 3;
	}

	int getMinimumSteps(int initPos, int goalPos, vector <int> hole)
	{
		int num_holes = hole.size(), low = -INF, high = INF;
		if( initPos > goalPos ) swap( initPos, goalPos );

		for( int i = 0; i < num_holes; i++ )
		{
			if( hole[i] < initPos ) low = max( low, hole[i] );
			else if( hole[i] > goalPos ) high = min( high, hole[i] );
			else return -1;
		}

		if( low == -INF || high == INF ) return find( goalPos - initPos );

		for( int i = low + 1; i < high; i++ )
			dist[i] = INF;

		dist[initPos] = 0;
		queue <int> q;
		q.push(initPos);

		while( !q.empty() )
		{
			int x = q.front();
			q.pop();

			for( int i = 1; x + i*i < high; i++ )
			{
				int y = x + i*i;
				if( dist[y] == INF )
				{
					dist[y] = dist[x] + 1;
					q.push(y);
				}
			}

			for( int i = 1; x - i*i > low; i++ )
			{
				int y = x - i*i;
				if( dist[y] == INF )
				{
					dist[y] = dist[x] + 1;
					q.push(y);
				}
			}
		}
		
		return dist[goalPos];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CubeRoll *obj;
	int answer;
	obj = new CubeRoll();
	clock_t startTime = clock();
	answer = obj->getMinimumSteps(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 1;
	int t2[] = {3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 36;
	p1 = 72;
	int t2[] = {300,100,200,400};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 21;
	int t2[] = {38,45};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 98765;
	p1 = 4963;
	int t2[] = {10,20,40,30};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 68332;
	p1 = 825;
	int t2[] = {99726,371,67,89210};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
