#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FormatAmt {
public:
	string amount(int dollars, int cents) {
	string str = "";

	stringstream cents_str; 
	if( cents < 10 ) cents_str << "0";
	cents_str << cents;

	stringstream dollars_str;
	if( dollars == 0 ) 
		dollars_str << "0";

	int num_digits = 0;
	int idollars = dollars;
	while( idollars > 0 )
	{
		num_digits++;
		idollars /= 10;
	}
	
	int count = 0;
	for( int i = 0; i < num_digits; i++ )
	{
		dollars_str << ( dollars % 10 );
		if( count == 2 )
		{
			count = 0;
			if( i + 1 < num_digits ) dollars_str << ",";
			dollars /= 10;
			continue;
		}
		count++;
		dollars /= 10;
	}


/*	vector <int> a;
	int num_digits = 0;
	while( dollars > 0 )
	{
		num_digits++;
		a.push_back( dollars % 10 );
		dollars /= 10;
	}
	
	int count = 0;
	for( int i = 0; i < a.size(); i++ )
	{
		dollars_str << a[i];
		if( count == 2 )
		{
			count = 0;
			if( i + 1 < a.size() ) dollars_str << ",";
			continue;
		}
		count++;
	}*/

	dollars_str << "$";
	string tmp = dollars_str.str();
	reverse( tmp.begin(), tmp.end() );

	str += tmp + "." + cents_str.str();
	return str;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FormatAmt *obj;
	string answer;
	obj = new FormatAmt();
	clock_t startTime = clock();
	answer = obj->amount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 123456;
	p1 = 0;
	p2 = "$123,456.00";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 49734321;
	p1 = 9;
	p2 = "$49,734,321.09";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 0;
	p1 = 99;
	p2 = "$0.99";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 249;
	p1 = 30;
	p2 = "$249.30";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000;
	p1 = 1;
	p2 = "$1,000.01";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
