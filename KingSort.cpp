#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class KingSort {
public:
  void init_maps( map <string, int>& forward_map, map <int, string>& backward_map )
  {
    backward_map[1] = "I";
    backward_map[2] = "II";
    backward_map[3] = "III";
    backward_map[4] = "IV";
    backward_map[5] = "V";
    backward_map[6] = "VI";
    backward_map[7] = "VII";
    backward_map[8] = "VIII";
    backward_map[9] = "IX";
    backward_map[10] = "X";
    backward_map[20] = "XX";
    backward_map[30] = "XXX";
    backward_map[40] = "XL";
    backward_map[50] = "L";

    for( int i = 11; i < 20; i++ )
      backward_map[i] = backward_map[10] + backward_map[i - 10]; 

    for( int i = 21; i < 30; i++ )
      backward_map[i] = backward_map[20] + backward_map[i - 20]; 

    for( int i = 31; i < 40; i++ )
      backward_map[i] = backward_map[30] + backward_map[i - 30]; 

    for( int i = 41; i < 50; i++ )
      backward_map[i] = backward_map[40] + backward_map[i - 40]; 

    map <int, string>::iterator it = backward_map.begin();
    while( it != backward_map.end() )
    {
      forward_map[it->second] = it->first;
      it++;
    }
  }


	vector <string> getSortedList(vector <string> kings) {
    map < string, vector <int> > names;
    map <string, int> forward_map;
    map <int, string> backward_map;
    init_maps( forward_map, backward_map );

    string name, buffer;
    for( int i = 0; i < kings.size(); i++ )
    {
      name = "";
      buffer = "";

      for( int j = 0; j < kings[i].size(); j++ )
      {
        if( kings[i][j] != ' ' ) {
          buffer += kings[i][j];
        } else {
          name = buffer;
          buffer = "";
        }
      }

      names[name].push_back( forward_map[buffer] );
    }

    vector <int> tmp;
    map < string, vector <int> >::iterator it = names.begin();
    while( it != names.end() )
    {
      tmp = it->second;
      sort( tmp.begin(), tmp.end() );
      it->second = tmp;
      it++;
    }

    vector <string> li;
    it = names.begin();
    while( it != names.end() )
    {
      for( int i = 0; i < it->second.size(); i++ )
      {
        li.push_back( string(it->first + " " + backward_map[it->second[i]]) );
      }
      it++;
    }

    return li;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	KingSort *obj;
	vector <string> answer;
	obj = new KingSort();
	clock_t startTime = clock();
	answer = obj->getSortedList(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Louis IX","Louis VIII"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Louis VIII","Louis IX"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Louis IX","Philippe II"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Louis IX","Philippe II"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Richard III","Richard I","Richard II"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Richard I","Richard II","Richard III"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"John X","John I","John L","John V"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John I","John V","John X","John L"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"Philippe VI","Jean II","Charles V","Charles VI","Charles VII","Louis XI"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Charles V","Charles VI","Charles VII","Jean II","Louis XI","Philippe VI"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"Philippe II","Philip II"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Philip II","Philippe II"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
