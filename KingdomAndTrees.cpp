#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


        bool debug = false;
class KingdomAndTrees {
public:
    bool canWork( int diff, vector <int> heights )
    {
        if( debug )
        {
            cout << "testing diff " << diff << endl;
        }
        int prev = max( heights[0] - diff, 1 );
        for( int i = 1; i < heights.size(); i++ )
        {
            if( debug )
            {
                cout << "prev " << prev << " heights[i] << " << heights[i] << endl;
            }
            if( heights[i] > prev )
            {
                if( heights[i] - diff > prev )
                    prev = heights[i] - diff;
                else 
                    prev = prev + 1;
            }
            else
            {
                if( heights[i] + diff > prev )
                    prev = prev + 1;
                else
                {
                    if( debug )
                    {
                        cout << diff << " didnt work " << endl;
                    }
                    return false;
                }
            }
        }
        if( debug )
        {
            cout << diff << " worked " << endl;
        }


        return true;
    }

	int minLevel(vector <int> heights)
    {
        int low = 0, high = 1000000000, mid;
        while( low != high )
        {
            mid = (low + high) / 2;
            if( canWork( mid, heights ) ) high = mid;
            else low = mid + 1;
        }
        return low;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	KingdomAndTrees *obj;
	int answer;
	obj = new KingdomAndTrees();
	clock_t startTime = clock();
	answer = obj->minLevel(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {9,5,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {5,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {548,47,58,250,2012};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 251;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
