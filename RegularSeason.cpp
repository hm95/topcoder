#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RegularSeason {
public:
	typedef struct path
	{
		int num_steps;
		string position;
	};

	vector <string> finalStandings(vector <string> teams, int rounds)
	{
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	RegularSeason *obj;
	vector <string> answer;
	obj = new RegularSeason();
	clock_t startTime = clock();
	answer = obj->finalStandings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"A 0 10 50","B 100 0 100","C 50 10 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	string t2[] = {"B 19","A 6","C 6"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"SPURS 0 33 67 100","LAKERS 67 0 33 100","WOLVES 33 67 0 100","KINGS 0 75 75 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	string t2[] = {"SPURS 8","LAKERS 7","WOLVES 7","KINGS 3"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"A 0 10 20 30 40 50 60 70 80 90","AA 90 0 10 20 30 40 50 60 70 80","AAA 80 90 0 10 20 30 40 50 60 70","AAAA 70 80 90 0 10 20 30 40 50 60","AAAAA 60 70 80 90 0 10 20 30 40 50","AAAAAA 50 60 70 80 90 0 10 20 30 40","AAAAAAA 40 50 60 70 80 90 0 10 20 30","AAAAAAAA 30 40 50 60 70 80 90 0 10 20","AAAAAAAAA 20 30 40 50 60 70 80 90 0 10","AAAAAAAAAA 10 20 30 40 50 60 70 80 90 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	string t2[] = {"A 90","AA 90","AAA 90","AAAA 90","AAAAA 90","AAAAAA 90","AAAAAAA 90","AAAAAAAA 90","AAAAAAAAA 90","AAAAAAAAAA 90"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"WF 0 0 71 10 62 87 49 75 50","OZ 38 0 79 55 36 96 63 17 37","C 13 75 0 96 61 2 33 5 64","LCG 13 85 87 0 60 72 86 1 12","GDDYC 71 62 21 6 0 17 63 34 32","B 37 66 81 81 53 0 61 80 90","XK 14 63 40 25 13 86 0 6 43","YVN 57 30 55 22 31 11 81 0 13","SKGAN 28 79 90 79 75 62 36 86 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	string t2[] = {"SKGAN 99","WF 93","B 92","LCG 84","YVN 80","OZ 76","GDDYC 72","C 63","XK 62"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ZSN 0 61 70 44 69 40 84 59 20","SJKB 95 0 88 39 99 18 90 58 44","EBIUF 63 71 0 5 28 26 41 90 71","MA 73 90 39 0 40 91 31 39 57","NPT 35 74 75 74 0 74 14 20 27","JVY 68 92 37 52 11 0 91 20 52","ZBOW 66 44 69 9 8 7 0 2 35","HH 31 70 14 39 6 68 73 0 20","P 70 62 66 54 9 55 5 98 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	string t2[] = {"MA 94","NPT 92","P 89","JVY 84","SJKB 77","ZSN 75","EBIUF 74","HH 74","ZBOW 61"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
