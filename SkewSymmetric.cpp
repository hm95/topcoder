#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SkewSymmetric {
public:
  vector <string> remove_white(vector <string> M) {
    string tmp = "";
    vector <string> matrix;

    for(int i = 0; i < M.size(); i++) {
      for(int j = i; j < M[i].size(); j++) {
        if(M[i][j] != ' ') {
          tmp += M[i][j];
        }
      }
      matrix.push_back(tmp);
      tmp = "";
    }

    for(int i = 0; i < matrix.size(); i++) {
      for(int j = 0; j < matrix[i].size(); j++) {
        cout << matrix[i][j];
      }
      cout << endl;
    }
    return matrix;
  }

  vector <string> transpose(vector <string> M) {
    vector <string> transpose_m = M;

    for(int i = 0; i < transpose_m.size(); i++) {
      for(int j = i; j < transpose_m[i].size(); j++) {
        transpose_m[i][j] = transpose_m[j][i];
      }
    }

    return transpose_m;
  }

  vector <string> negative(vector <string> M) {
    vector <string> negative_m = M;

    for(int i = 0; i < negative_m.size(); i++) {
      for(int j = 0; j < negative_m[i].size(); j++) {
        negative_m[i][j] *= -1;
      }
    }

    return negative_m;
  }

	int minChanges(vector <string> Matrix) {
    vector <string> M = remove_white(Matrix);
    vector <string> transpos = transpose(M);
    vector <string> negativ = negative(M);

    int num_diff = 0;
    for(int i = 0; i < transpos.size(); i++) {
      for(int j = 0; j < transpos[i].size(); j++) {
        if(transpos[i][j] != negativ[i][j])
          num_diff++;
      }
    }
    return num_diff;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SkewSymmetric *obj;
	int answer;
	obj = new SkewSymmetric();
	clock_t startTime = clock();
	answer = obj->minChanges(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 2 8","-2 1 0","3 99 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 1 1 1 1 1","-1 0 1 1 1 1","-1 -1 0 1 1 1","-1 -1 -1 0 1 1","-1 -1 -1 -1 0 1","0 0 0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 0 0 0","0 0 0 0","0 0 0 0","0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1 0","0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
