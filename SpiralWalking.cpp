#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <stdio.h>
#include <string.h>

using namespace std;

class SpiralWalking
{
    public:
        vector <string> LM;
        bool inRange( int x, int y )
        {
            if( x >= 0 && x < LM.size() && y >= 0 && y < LM[0].size() ) return true;
            return false;
        }

        int totalPoints( vector <string> levelMap )
        {
            LM = levelMap;
            const int width = levelMap.size();
            const int height = levelMap[0].size();

            int sum = 0;
            int x = 0, y = 0;

            int dirx[4] = {0, 1, 0, -1};
            int diry[4] = {1, 0, -1, 0};

            int dirindex = 0;

            bool visited[width][height];
            memset( visited, false, sizeof( visited ) );

            int i, px, py, px2, py2; // px, py, px2, py2 are the 'new' coordinates for x and y, on each iteration

            while( true )
            {
                i = 0;
                visited[x][y] = true;

                px = x + dirx[ ( dirindex ) % 4 ];
                py = y + diry[ ( dirindex ) % 4 ];

                px2 = x + dirx[ ( 1 + dirindex ) % 4 ];
                py2 = y + diry[ ( 1 + dirindex ) % 4 ];

                if( inRange( px, py ) && !visited[px][py] )
                {
                	cout << levelMap[x][y] - '0' << endl;
                    sum += levelMap[x][y] - '0';
                }
                else if( inRange( px2, py2 ) && !visited[px2][py2] )
                {
                    i = 1;
                }
                else
                {
            		sum += levelMap[x][y] - '0';
                    break;
                }

                dirindex = ( dirindex + i ) % 4;
                x += dirx[ dirindex ];
                y += diry[ dirindex ];
            }

            return sum;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SpiralWalking *obj;
	int answer;
	obj = new SpiralWalking();
	clock_t startTime = clock();
	answer = obj->totalPoints(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"111","111","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"101","110"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"00","10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"86850","76439","15863","24568","45679","71452","05483"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 142;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
