#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TimeCard {
public:
	string process( string start_time, int diff )
	{
		int check_in_hour, check_in_min, check_in_pm;
		
		sscanf( start_time.c_str(), "%d:%d,%as", &check_in_hour, &check_in_min, &check_in_pm );
		
		int t = diff + 60*check_in_hour + min;
		if( check_in_pm == "pm" ) t += 12*60;
		
		int ah = diff / 60;
		int am = ( diff % 60 );
		
		
	}
	string leave(vector <string> stime)
	{
		int check_in_hour, check_in_min;
		int check_out_hour, check_out_min;
		string check_in_pm, check_out_pm;
		int check_in_time = 0, check_out_time = 0, total_day = 0, total_week = 0;
		
		for( int i = 0; i < stime.size() - 1; i += 2 )
		{
			sscanf( stime[i].c_str(), "%d:%d,%as", &check_in_hour, &check_in_min, &check_in_pm );
			sscanf( stime[i+1].c_str(), "%d:%d,%as", &check_out_hour, &check_out_min, &check_out_pm );
			
			check_in_time = check_in_hour*60 + check_in_min;
			check_out_time = check_out_hour*60 + check_out_min;

			if( check_in_pm == "pm" ) check_in_time += 12*60;
			if( check_out_pm == "pm" ) check_out_time += 12*60;
			
			total_day = check_in_time - check_out_time;
			total_week += total_day;
		}
		
		int diff = 40*60 - total_week;
		cout << diff << endl;
		
		if( diff > 20*60 ) return "BELOW 40";
		if( diff < 0 ) return "ABOVE 40";
	
		string shift_length = process( stime[stime.size() -1], diff );
		
		return shift_length;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TimeCard *obj;
	string answer;
	obj = new TimeCard();
	clock_t startTime = clock();
	answer = obj->leave(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"03:00,pm"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "BELOW 40";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"09:00,am","05:00,pm","09:00,am","05:00,pm","09:00,am","05:00,pm","09:00,am","05:00,pm","09:00,am"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "05:00,pm";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"12:00,am","08:00,pm","12:00,am","08:00,pm","12:00,am"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "12:00,am";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"12:00,pm","08:00,pm","12:00,am","08:00,pm","12:00,am"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "12:00,pm";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"09:00,am","04:31,pm","09:00,am","04:31,pm","09:00,am","05:00,pm","09:00,am","05:00,pm","03:53,am"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "12:51,pm";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
