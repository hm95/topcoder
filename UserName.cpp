#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class UserName {
public:
	bool startsWith(string src, string token){	return src.substr(0,token.length()) == token ;}

	string newMember(vector <string> existingNames, string newName)
	{
		map <string, int> mmap;
		for( int i = 0 ; i < existingNames.size(); i++ )
			mmap[existingNames[i]]++;

		int count = 0;
		for( int i = 0; i < existingNames.size(); i++ )
			if( startsWith( existingNames[i], newName ) && mmap[newName] != 0 ) count++;

		stringstream iss;
		iss << count;
		if( count == 0 ) return newName;
		else newName += iss.str();
		return newName;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	UserName *obj;
	string answer;
	obj = new UserName();
	clock_t startTime = clock();
	answer = obj->newMember(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"MasterOfDisaster","DingBat","Orpheus","WolfMan","MrKnowItAll"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "TygerTyger";
	p2 = "TygerTyger";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"MasterOfDisaster","TygerTyger1","DingBat","Orpheus","TygerTyger","WolfMan","MrKnowItAll"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "TygerTyger";
	p2 = "TygerTyger2";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"TygerTyger2000","TygerTyger1","MasterDisaster","DingBat","Orpheus","WolfMan","MrKnowItAll"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "TygerTyger";
	p2 = "TygerTyger";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"grokster2","BrownEyedBoy","Yoop","BlueEyedGirl","grokster","Elemental","NightShade","Grokster1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "grokster";
	p2 = "grokster1";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"Bart4","Bart5","Bart6","Bart7","Bart8","Bart9","Bart10","Lisa","Marge","Homer","Bart","Bart1","Bart2","Bart3","Bart11","Bart12"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bart";
	p2 = "Bart13";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
